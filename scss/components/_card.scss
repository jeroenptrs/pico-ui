@use "sass:map";
@use "../../pico/scss/settings" as *;
@use "../../pico/scss/colors" as *;

/**
 * This component extracts article specific styling related to cards to a class .card for re-use across other components
 * as well as styles for .card related to the .dialog component
 */

@if map.get($modules, "components/card") {
  /**
   * Card (.card)
   */

  #{$parent-selector} .card {
    margin-bottom: var(#{$css-var-prefix}block-spacing-vertical);
    padding: var(#{$css-var-prefix}block-spacing-vertical)
      var(#{$css-var-prefix}block-spacing-horizontal);
    border-radius: var(#{$css-var-prefix}border-radius);
    background: var(#{$css-var-prefix}card-background-color);
    box-shadow: var(#{$css-var-prefix}card-box-shadow);

    > header,
    > footer {
      margin-right: calc(var(#{$css-var-prefix}block-spacing-horizontal) * -1);
      margin-left: calc(var(#{$css-var-prefix}block-spacing-horizontal) * -1);
      padding: calc(var(#{$css-var-prefix}block-spacing-vertical) * 0.66)
        var(#{$css-var-prefix}block-spacing-horizontal);
      background-color: var(#{$css-var-prefix}card-sectioning-background-color);
    }

    > header {
      margin-top: calc(var(#{$css-var-prefix}block-spacing-vertical) * -1);
      margin-bottom: var(#{$css-var-prefix}block-spacing-vertical);
      border-bottom: var(#{$css-var-prefix}border-width)
        solid
        var(#{$css-var-prefix}card-border-color);
      border-top-right-radius: var(#{$css-var-prefix}border-radius);
      border-top-left-radius: var(#{$css-var-prefix}border-radius);
    }

    > footer {
      margin-top: var(#{$css-var-prefix}block-spacing-vertical);
      margin-bottom: calc(var(#{$css-var-prefix}block-spacing-vertical) * -1);
      border-top: var(#{$css-var-prefix}border-width)
        solid
        var(#{$css-var-prefix}card-border-color);
      border-bottom-right-radius: var(#{$css-var-prefix}border-radius);
      border-bottom-left-radius: var(#{$css-var-prefix}border-radius);
    }

    &.no-spacing {
      padding: 0;

      > header,
      > footer {
        margin: 0;
        padding: 0;
      }
    }

    &.bordered,
    &.outline {
      border: var(#{$css-var-prefix}border-width)
        solid
        var(#{$css-var-prefix}card-outline-border-color);
    }

    &.outline {
      background-color: transparent;
      > header {
        border-bottom-color: var(#{$css-var-prefix}card-outline-border-color);
        background-color: transparent;
      }
      > footer {
        border-top-color: var(#{$css-var-prefix}card-outline-border-color);
        background-color: transparent;
      }
    }
  }

  @if map.get($modules, "content/typography") {
    /**
     * Typography
     */

    // Margin-top for headings after a block
    #{$parent-selector} :where(.card) {
      ~ :is(h1, h2, h3, h4, h5, h6) {
        margin-top: var(#{$css-var-prefix}typography-spacing-top);
      }
    }
  }

  @if map.get($modules, "components/modal") {
    /**
     * Pico Modal (<dialog>)
     * Picoui Modal (.dialog)
     */

    #{$parent-selector} dialog,
    #{$parent-selector} .dialog {
      // Content
      .card {
        $close-selector: if(
          $enable-classes,
          ".close, :is(a, button)[rel=prev]",
          ":is(a, button)[rel=prev]"
        );
        width: 100%;
        max-height: calc(100vh - var(#{$css-var-prefix}spacing) * 2);
        margin: var(#{$css-var-prefix}spacing);
        overflow: auto;

        @if map.get($breakpoints, "sm") {
          @media (min-width: map.get(map.get($breakpoints, "sm"), "breakpoint")) {
            max-width: map.get(map.get($breakpoints, "sm"), "viewport");
          }
        }

        @if map.get($breakpoints, "md") {
          @media (min-width: map.get(map.get($breakpoints, "md"), "breakpoint")) {
            max-width: map.get(map.get($breakpoints, "md"), "viewport");
          }
        }

        > header {
          > * {
            margin-bottom: 0;
          }

          #{$close-selector} {
            margin: 0;
            margin-left: var(#{$css-var-prefix}spacing);
            padding: 0;
            float: right;
          }
        }

        > footer {
          text-align: right;

          button,
          [role="button"] {
            margin-bottom: 0;

            &:not(:first-of-type) {
              margin-left: calc(var(#{$css-var-prefix}spacing) * 0.5);
            }
          }
        }

        // Close icon
        #{$close-selector} {
          display: block;
          width: 1rem;
          height: 1rem;
          margin-top: calc(var(#{$css-var-prefix}spacing) * -1);
          margin-bottom: var(#{$css-var-prefix}spacing);
          margin-left: auto;
          border: none;
          background-image: var(#{$css-var-prefix}icon-close);
          background-position: center;
          background-size: auto 1rem;
          background-repeat: no-repeat;
          background-color: transparent;
          opacity: 0.5;

          @if $enable-transitions {
            transition: opacity var(#{$css-var-prefix}transition);
          }

          &:is(
              [aria-current]:not([aria-current="false"]),
              :hover,
              :active,
              :focus
            ) {
            opacity: 1;
          }
        }
      }
    }

    // Animations
    @if $enable-classes and $enable-transitions {
      $animation-duration: 0.2s;

      :where(.modal-is-opening, .modal-is-closing) {
        dialog > .card,
        .dialog > .card {
          animation-duration: $animation-duration;
          animation-timing-function: ease-in-out;
          animation-fill-mode: both;
        }

        dialog,
        .dialog {
          > .card {
            animation-delay: $animation-duration;
            animation-name: modal;
          }
        }
      }

      .modal-is-closing {
        dialog > .card,
        .dialog > .card {
          animation-delay: 0s;
          animation-direction: reverse;
        }
      }
    }
  }

  // Responsive spacings
  @if $enable-responsive-spacings {
    .card {
      @each $key, $values in $breakpoints {
        @if $values {
          @media (min-width: map.get($values, "breakpoint")) {
            $multiplier: 1;
            @if $key == "sm" {
              $multiplier: 1.25;
            } @else if $key == "md" {
              $multiplier: 1.5;
            } @else if $key == "lg" {
              $multiplier: 1.75;
            } @else if $key == "xl" {
              $multiplier: 2;
            } @else if $key == "xxl" {
              $multiplier: 2.25;
            }

            #{$css-var-prefix}block-spacing-vertical: calc(
              var(#{$css-var-prefix}spacing) * $multiplier
            );
            #{$css-var-prefix}block-spacing-horizontal: calc(
              var(#{$css-var-prefix}spacing) * $multiplier
            );
          }
        }
      }
    }
  }
}

// Light color scheme (Default)
// Can be forced with data-theme="light"
[data-theme="light"],
:root:not([data-theme="dark"]) {
  #{$parent-selector} .card {
    #{$css-var-prefix}card-outline-border-color: #{$slate-50};
  }
}

// Dark color scheme (Forced)
// Enabled if forced with data-theme="dark"
[data-theme="dark"] {
  #{$parent-selector} .card {
    #{$css-var-prefix}card-outline-border-color: #{$slate-850};
  }
}

// Dark color scheme (Auto)
// Automatically enabled if user has Dark mode enabled
@media only screen and (prefers-color-scheme: dark) {
  :root:not([data-theme]) {
    #{$parent-selector} .card {
      #{$css-var-prefix}card-outline-border-color: #{$slate-850};
    }
  }
}
